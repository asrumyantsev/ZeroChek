package com.company.zero;

/*
Реализуйте функцию, которая принимает на  вход два параметра - количество нулей и количество единиц, и определяет  сколько есть способов размещения этих нулей и единиц так, что бы не  было двух нулей идущих подряд.
Например, найдём все способы размещения двух нулей и двух единиц. Существует шесть возможных способов размещения: 0011, 0101, 0110, 1001, 1010, 1100. В трех случаях содержится два нуля, идущих подряд: 0011, 1001 и 1100. Вычитаем их из общего числа и получаем три возможных способа: 0101, 0110 и 1010. Ответ - 3.

Примеры использования:

withoutZeros(2, 2); // 3
withoutZeros(1, 1); // 2
withoutZeros(1, 3), // 4
withoutZeros(2, 4); // 10

Конечный результат должен быть представлен в виде ссылки на repl.it или аналогичный сервис, где можно скомпилировать код и проверить его работоспособность.

 */

/*
Не сказать, что я ее решил при помощи знаний комбинаторики.
В принципе алгоритм работы был такой:
1. Погуглил, поискал что вообще пишут про такие вещи
2. В принципе, сходу пришла в голову идея перебрать все числа от 0 до цифры рангом Количество нулей + Количество единиц, перевести сие дело в строку и отбросить ненуженое.
3. Нашел биноминальные коэффициенты, ковырял ковырял, ничего не понял
4. Построил табличку с решениями, сами решения находил при помощи вот этой штуки https://repl.it/repls/WoefulBreakableCheckpoint
5. Попытался найти закономерность в составлении таблички
6. Потом наткнулся вот на это видео https://ru.hexlet.io/courses/sicp/lessons/sicp_tree_recursion/theory_unit
7. Попробовал порешать, но в итоге нашел еще какое то подобное решение в интернете и реализовал примерно так же.
В общем, потестировал, все работает. Не сказать, что смогу грамотно объяснить логику работы от начала до конца.
 */


public class Main {

    public static int CheckSomeone(int zero, int one) {
        //System.out.println(NUmberOfCombinations);

        if (zero > one + 1) {
            return 0;
        } else if ((zero == 0) || (one == 0)) {
            return 1;
        }

        return CheckSomeone(zero, one -1) + CheckSomeone(zero-1, one - 1);
    }

    public static void main(String[] args) {
        //System.out.println("Hello world!");
        System.out.println(CheckSomeone(6,6));
    }

}



